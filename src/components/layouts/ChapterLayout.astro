---
import { getGithubURL } from "~/utils/urls";
import ByLine from "../ByLine.astro";
import BaseLayout from "./BaseLayout.astro";
import { PartFrontmatter } from "./PartLayout.astro";
import { GITHUB_NEW_ISSUE_URL } from "~/data/constants";
import { createBibTex, getCitations } from "~/utils/citations";
import Code from "../Code.astro";
import Part from "../Part.astro";
import Icon from "astro-icon";
import { CollectionEntry, getCollection } from "astro:content";

export type ChapterFrontmatter = CollectionEntry<"chapter">;

const {
    data: { slug: url = "", astro, ...data },
    slug,
    ...rest
} = Astro.props;
const parentUrl = url.split("/").slice(0, 2).join("/");

const parts = await Promise.all(
    (
        await getCollection("part")
    )
        .filter((part) => part.data.published)
        .map(async (part) => ({
            ...part,
            chapters: (
                await getCollection(
                    "chapter",
                    ({ data }) => data.part === part.slug
                )
            ).filter((chapter) => chapter.data.published),
        }))
);

const allChapters = parts.flatMap((part) => part?.chapters);
const part = parts.find((part) => part.slug === data.part);

const authors: { name: string; url: string }[] = (data.authors ?? []).map(
    (author) => ({
        name: Object.keys(author)[0],
        url: Object.values(author)[0],
    })
);

const affiliations: { name: string; url: string }[] = (
    data.affiliations ?? []
).map((affiliation) => ({
    name: Object.keys(affiliation)[0],
    url: Object.values(affiliation)[0],
}));

const thisChapterIndex = data.index;
const prev = thisChapterIndex >= 1 ? allChapters[thisChapterIndex - 1] : null;
const next =
    thisChapterIndex < allChapters.length
        ? allChapters[thisChapterIndex + 1]
        : null;

const references = data.citations ?? [];

if (next) {
    next.slug = `/${next.slug}`;
}

if (prev) {
    prev.slug = `/${prev.slug}`;
}
---

<BaseLayout>
    <div class="container">
        <nav class="flex pb-4">
            {
                prev?.data?.published ? (
                    <a href={prev.slug} class="w-6 h-6 md:-ml-6">
                        <Icon name="ic:outline-chevron-left" />
                    </a>
                ) : (
                    <div />
                )
            }
            <div>
                <a class="font-bold text-sm" href="/">Aligning AI</a> :
                <a class="font-bold text-sm" href={part.slug}
                    >{part.data?.title}</a
                >
            </div>
            {
                next?.data?.published ? (
                    <a href={next.slug} class="w-6 h-6">
                        <Icon name="ic:outline-chevron-right" />
                    </a>
                ) : (
                    <div />
                )
            }
        </nav>
        <h1 class="text-4xl font-bold flex-1">
            {data.index}
            {data.title}
        </h1>
    </div>
    <ByLine
        authors={authors}
        affiliations={affiliations}
        lastUpdated={data.lastUpdated}
        url={url}
    />
    <div class="container">
        <article class="prose">
            <slot />
        </article>
    </div>
    <hr />
    <section class="container flex flex-wrap justify-between gap-4">
        {
            prev?.data?.published ? (
                <div>
                    <h3 class="font-bold">Previous:</h3>
                    <a href={prev.slug}>{prev.data?.title}</a>
                </div>
            ) : (
                <div />
            )
        }
        {
            next?.data?.published ? (
                <div>
                    <h3 class="font-bold">Next:</h3>
                    <a href={next.slug}>{next.data?.title}</a>
                </div>
            ) : (
                <div />
            )
        }
    </section>
    <hr />
    <section class="container">
        <div class="prose prose-sm text-zinc-500">
            {
                data.acknowledgments && (
                    <div>
                        <h3>Acknowledgments</h3>
                        <p>{data.acknowledgments}</p>
                    </div>
                )
            }

            {
                !!references.length && (
                    <div>
                        <h3>References</h3>
                        <ul>
                            {references.map((reference) => (
                                <li set:html={reference} />
                            ))}
                        </ul>
                    </div>
                )
            }
            <div>
                <h3>Updates & Corrections</h3>
                <p>
                    If you see any mistakes or want to suggest improvements,
                    please <a href={GITHUB_NEW_ISSUE_URL}
                        >create an issue on GitHub</a
                    >
                </p>
            </div>
            <div>
                <h3>Reuse</h3>
                <p>
                    Figures and text are available under a Creative Commons
                    license (<a
                        href="https://creativecommons.org/licenses/by/4.0/"
                        >CC-BY 4.0</a
                    >) unless otherwise mentioned. The source is <a
                        href={getGithubURL(url)}>available on GitHub</a
                    >. Figures taken from other sources (as mentioned in the
                    captions by "Figure from...") are not available under this
                    license.
                </p>
            </div>
            <div>
                <h3>Citation</h3>
                <Code
                    value={createBibTex({
                        title: data.title,
                        authors,
                        url,
                        lastUpdated: data.lastUpdated,
                    })}
                />
            </div>
        </div>
    </section>
    <hr />
    <footer class="container">
        <a href={getGithubURL(url)}>Github</a>
    </footer>
</BaseLayout>
